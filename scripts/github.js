// Generated by CoffeeScript 1.10.0
(function() {
  var crypto;

  crypto = require('crypto');

  module.exports = function(robot) {
    var isCorrectSignature, tweetForIssues, tweetForPullRequest;
    robot.router.post("/github/webhook", function(req, res) {
      var event_type, signature, tweet;
      event_type = req.get('X-Github-Event');
      signature = req.get('X-Hub-Signature');
      if (!isCorrentSignature(signature, req.body)) {
        res.status(401).send('unauthorized');
        return;
      }
      tweet = (function() {
        switch (event_type) {
          case 'issue':
            return tweetForIssue(req.body);
          case 'pull_request':
            return tweetForPullRequest(req.body);
        }
      })();
      if (tweet != null) {
        robot.send({}, tweet);
        return res.status(201).send('created');
      } else {
        return res.status(200).send('ok');
      }
    });
    isCorrectSignature = function(signature, body) {
      var digest_method, generated_signature, hashed_data, hmac, pairs;
      pairs = signature.split('=');
      digest_method = pairs[0];
      hmac = crypto.createHmac(digest_method, process.env.HUBOT_GITHUB_SECRET);
      hmac.update(JSON.stringify(body), 'utf-8');
      hashed_data = hmac.digest('hex');
      generated_signature = [digest_method, hashed_data].join('=');
      return signature === generated_signature;
    };
    tweetForPullRequest = function(json) {
      var action, pr;
      action = json.action;
      pr = json.pull_request;
      switch (action) {
        case 'opened':
          return pr.user.login + "さんからPull Requestをもらいました " + pr.title + " " + pr.html_url;
        case 'closed':
          if (pr.merged) {
            return pr.user.login + "さんのPull Requestをマージしました " + pr.title + " " + pr.html_url;
          }
      }
    };
    return tweetForIssues = function(json) {
      var action, issue;
      action = json.action;
      issue = json.issue;
      switch (action) {
        case 'opened':
          return issue.user.login + "さんがIssueを上げました " + issue.title + " " + issue.html_url;
        case 'closed':
          return issue.user.login + "さんのIssueがcloseされました " + issue.title + " " + issue.html_url;
      }
    };
  };

}).call(this);
